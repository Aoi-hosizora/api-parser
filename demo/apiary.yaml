swagger: '2.0'
host: localhost:3344
basePath: /
tags:
- name: User
  description: User-Controller
- name: Subscribe
  description: Sub-Controller
info:
  title: DemoApi
  description: This is a demo api
  version: '1.1'
  termsOfService: xxx
  license:
    name: MIT
    url: xxx
  contact:
    name: xxx
    url: xxx
    email: xxx
paths:
  /v1/user/{uid}/subscriber:
    get:
      operationId: v1-user-uid-subscriber-get
      summary: User's subscribers
      description: Query user's subscribers, return page data
      tags:
      - User
      - Subscribe
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        type: integer
        required: true
        description: user id
        allowEmptyValue: false
        example: 1
      - name: page
        in: query
        type: integer
        required: false
        description: page
        allowEmptyValue: true
        default: 1
      security: []
      requests:
        '200':
          headers:
            a:
              type: string
              description: b
            Content-Type:
              type: string
              description: application/json
          examples:
            application/json: |-
              {
                "c": "d",
                "e": "f"
              }
      responses:
        '400':
          description: |-
            "request param error"
          examples:
            application/json: |-
              {
                "code": 400,
                "message": "request param error"
              }
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '404':
          description: |-
            "user not found"
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '200':
          headers:
            a:
              type: string
              description: b
            Content-Type:
              type: string
              description: application/json; charset=utf-8
          examples:
            application/json: |-
              {
                "code": 200,
                "message": "success",
                "data": {
                  "count": 1,
                  "page": 1,
                  "data": [
                    {
                      "uid": 1,
                      "username": "TestUserName",
                      "profile": "TestProfile"
                    }
                  ]
                }
              }
  /v1/user/subscribing:
    put:
      operationId: v1-user-subscribing-put
      summary: Subscribe user
      description: Subscribe someone
      tags:
      - User
      - Subscribe
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Login Token
        allowEmptyValue: false
      - name: other
        in: header
        type: integer
        required: false
        description: other header
        allowEmptyValue: false
      - name: to
        in: formData
        type: integer
        required: true
        description: user id
        allowEmptyValue: false
      - name: to2
        in: formData
        type: integer
        required: true
        description: user id
        enum:
        - 1
        - 2
        - 3
      security:
      - Jwt: []
      requests:
        '200':
          headers:
            a:
              type: string
              description: b
            Content-Type:
              type: string
              description: application/json
          examples:
            application/json: |-
              {
                "c": "d",
                "e": "f"
              }
      responses:
        '401':
          description: |-
            authorization failed, token has expired
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '400':
          description: |-
            "request param error", "request format error"
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '404':
          description: |-
            "user not found"
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '500':
          description: |-
            "subscribe failed"
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '200':
          examples:
            application/json: |-
              {
                "code": 200,
                "message": "success",
                "data": [
                  {
                    "content": "123"
                  },
                  {
                    "content": "456"
                  }
                ]
              }
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
    delete:
      operationId: v1-user-subscribing-delete
      summary: Unsubscribe user
      tags:
      - User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Login Token
        allowEmptyValue: false
      - name: to
        in: formData
        type: integer
        required: true
        description: user id
        allowEmptyValue: false
      security:
      - Jwt: []
      responses:
        '401':
          description: |-
            authorization failed, token has expired
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '400':
          description: |-
            "request param error", "request format error"
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
          schema:
            $ref: '#/definitions/Result'
          examples:
            application/json: |-
              {
                "code": 400,
                "message": "request param error"
              }
        '404':
          description: |-
            "user not found"
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '500':
          description: |-
            "unsubscribe failed"
          schema:
            $ref: '#/definitions/Result'
          examples:
            application/json: |-
              {
                "code": 500,
                "message": "unsubscribe failed"
              }
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
        '200':
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
          schema:
            $ref: '#/definitions/Result'
  /v1/auth/login:
    post:
      operationId: v1-auth-login-post
      summary: Login
      tags:
      - Authorization
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: param
        in: body
        required: true
        description: login param
        schema:
          $ref: '#/definitions/LoginParam'
      security: []
      responses:
        '200':
          description: |-
            "OK"
          examples:
            application/json: |-
              {
                "code": 200,
                "message": "success",
                "data": {
                  "count": 1,
                  "page": 1,
                  "data": [
                    {
                      "uid": 1,
                      "username": "TestUserName",
                      "profile": "TestProfile"
                    }
                  ]
                }
              }
          headers:
            Content-Type:
              type: string
              description: application/json; charset=utf-8
definitions:
  LoginParam:
    title: LoginParam
    description: body of login param
    type: object
    required:
    - username
    - password
    properties:
      username:
        description: username
        type: string
        example: ExampleUsername
      password:
        description: password
        type: string
        example: ExamplePassword
      expire:
        description: login expire
        type: integer
        example: 86400
      other:
        description: other param
        type: object
        $ref: '#/definitions/LoginParamRef'
      others:
        description: other param
        type: array
        items:
          $ref: '#/definitions/LoginParamRef'
      enum:
        description: other param
        type: string
        enum:
        - a
        - '2'
        - 3,4
      enum2:
        description: other param
        type: integer
        enum:
        - 5
        - 6
        - 7
        - 8
        format: integer32
      format:
        description: other param
        type: string
        format: '2000-01-01 00:00:00'
  LoginParamRef:
    title: LoginParamRef
    description: ref used
    type: object
    properties:
      other:
        description: other param
        type: string
  Result:
    title: Result
    description: global result model
    type: object
    required:
    - code
    - message
    properties:
      code:
        description: status code
        type: integer
      message:
        description: status message
        type: string
